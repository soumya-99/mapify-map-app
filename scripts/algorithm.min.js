let predFromSource=new Map,predFromDest=new Map,sourceQueue=new Array,destQueue=new Array,sourceVisited=new Array(vertex).fill(!1),destVisited=new Array(vertex).fill(!1),universalPaths=new Array,pathColor,copyOfWaypoints=new Array;function bfsManager(source,destination,waypoints){let BfsSource=source,BfsDestination=destination,interMediatePoints=new Array;if(interMediatePoints.push(...waypoints),copyOfWaypoints=univarsalWaypoints,pathColor=materialYouPathColor,0===interMediatePoints.length)return void BfsSingleRun(BfsSource,BfsDestination);let currentSource=BfsSource,currDestination=interMediatePoints[0];BfsSingleRun(currentSource,currDestination);for(let i=1;i<interMediatePoints.length;i++)currentSource=currDestination,currDestination=interMediatePoints[i],resetBfsManagerStates(),BfsSingleRun(currentSource,currDestination);currentSource=currDestination,currDestination=BfsDestination,resetBfsManagerStates(),BfsSingleRun(currentSource,currDestination)}function BfsSingleRun(currentSource,currDestination){sourceVisited[currentSource]=!0,sourceQueue.push(currentSource),destVisited[currDestination]=!0,destQueue.push(currDestination);let sourceBfsFlag=-1,destBfsFlag=-1;for(;-1===sourceBfsFlag&&-1===destBfsFlag;)sourceBfsFlag=sourceBfs(),destBfsFlag=destBfs();let currentPath=getPath(sourceBfsFlag,destBfsFlag);0===currentPath.length?M.toast({html:"No path exists in between",classes:"rounded"}):(universalPaths.push(...currentPath),highLightPath())}function sourceBfs(){if(0===sourceQueue.length)return 0;let x=sourceQueue.shift();x=Math.trunc(x);let coords=findCoordinateOfVertex(x),boxPixlX,boxPixlY,queueTemp=getN8Adjacents(x,coords[0],coords[1]);for(let k=0;k<queueTemp.length;k++){let vNum=queueTemp[k];if(!1===sourceVisited[vNum]&&(sourceVisited[vNum]=!0,sourceQueue.push(vNum),predFromSource.set(vNum,x),!0===predFromDest.has(vNum)))return vNum}return-1}function destBfs(){if(0===destQueue.length)return 0;let x=destQueue.shift();x=Math.trunc(x);let coords=findCoordinateOfVertex(x),boxPixlX,boxPixlY,queueTemp=getN8Adjacents(x,coords[0],coords[1]);for(let k=0;k<queueTemp.length;k++){let vNum=queueTemp[k];if(!1===destVisited[vNum]&&(destVisited[vNum]=!0,destQueue.push(vNum),predFromDest.set(vNum,x),!0===predFromSource.has(vNum)))return vNum}return-1}function getN8Adjacents(currItem,boxPixlX,boxPixlY){let queueTemp=new Array,upPixlX,upPixlY=boxPixlY-box_dimensions;upPixlY>0&&compareColorValues(boxPixlX,upPixlY,pathColor)&&queueTemp.push(currItem-maxX);let leftPixX=boxPixlX-box_dimensions,leftPixY;leftPixX>0&&compareColorValues(leftPixX,boxPixlY,pathColor)&&queueTemp.push(currItem-1);let rightPixX=boxPixlX+box_dimensions,rightPixY=boxPixlY;rightPixX<canvas.width&&compareColorValues(rightPixX,rightPixY,pathColor)&&queueTemp.push(currItem+1);let bottomPixX=boxPixlX,bottomPixY=boxPixlY+box_dimensions;bottomPixY<canvas.height&&compareColorValues(bottomPixX,bottomPixY,pathColor)&&queueTemp.push(currItem+maxX);let topleftPixX=boxPixlX-box_dimensions,topleftPixY=boxPixlY-box_dimensions;topleftPixX>0&&topleftPixY>0&&compareColorValues(topleftPixX,topleftPixY,pathColor)&&queueTemp.push(currItem-maxX-1);let toprightPixX=boxPixlX+box_dimensions,toprightPixY=boxPixlY-box_dimensions;toprightPixX<canvas.width&&toprightPixY>0&&compareColorValues(toprightPixX,toprightPixY,pathColor)&&queueTemp.push(currItem-maxX+1);let bottomleftPixX=boxPixlX-box_dimensions,bottomleftPixY=boxPixlY+box_dimensions;bottomleftPixX>0&&bottomleftPixY<canvas.height&&compareColorValues(bottomleftPixX,bottomleftPixY,pathColor)&&queueTemp.push(currItem+maxX-1);let bottomrightPixX=boxPixlX+box_dimensions,bottomrightPixY=boxPixlY+box_dimensions;return bottomrightPixX<canvas.width&&bottomrightPixY<canvas.height&&compareColorValues(bottomrightPixX,bottomrightPixY,pathColor)&&queueTemp.push(currItem+maxX+1),queueTemp}function getPath(sourceFlag,destFlag){let temp=new Array,index=sourceFlag>destFlag?sourceFlag:destFlag;for(;!0===predFromSource.has(index);){let curr=predFromSource.get(index);temp.push(curr),index=curr}for(index=sourceFlag>destFlag?sourceFlag:destFlag;!0===predFromDest.has(index);){let curr=predFromDest.get(index);temp.push(curr),index=curr}return temp}function highLightPath(){let pathColor=materialYouPathColor;const pathWidth=parseInt(pathSize);for(let p=0;p<universalPaths.length;p++){let coords=findCoordinateOfVertex(universalPaths[p]);colorImagePixels(coords[0],coords[1],pathWidth,hexToRgb(pathColor).r,hexToRgb(pathColor).g,hexToRgb(pathColor).b)}}const pathSizeElement=document.getElementById("path-size"),badgePathSize=document.getElementById("badge-pathSize");let pathSize=1;function redrawPath(){if(1==isReset)return;let img=document.getElementById("map-image"),tempCustomImage=document.getElementById("map-image"),newImage=document.getElementById("mapSelect");!0===customInputEnabled?(tempCustomImage.src=customImageInput.src,canvas.width=customImageInput.width,canvas.height=customImageInput.height,tempCustomImage.onload=()=>{context.drawImage(tempCustomImage,0,0,customImageInput.width,customImageInput.height),highLightPath(),reDrawSrcDest(),reDrawStops()}):(img.src=newImage.value,canvas.width=img.width,canvas.height=img.height,img.onload=()=>{context.drawImage(img,0,0,img.width,img.height),highLightPath(),reDrawSrcDest(),reDrawStops()})}function reDrawSrcDest(){for(let i=0;i<universalSources.length;i++){let srcCoord=findCoordinateOfVertex(universalSources[i]);colorImagePixels(srcCoord[0],srcCoord[1],6,0,0,255)}for(let i=0;i<universalDests.length;i++){let destCoord=findCoordinateOfVertex(universalDests[i]);colorImagePixels(destCoord[0],destCoord[1],6,0,255,0)}}function reDrawStops(){for(let i=0;i<copyOfWaypoints.length;i++)wayPointCoord=findCoordinateOfVertex(copyOfWaypoints[i]),colorImagePixels(wayPointCoord[0],wayPointCoord[1],6,255,0,0)}function colorImagePixels(x,y,size,colorR,colorG,colorB){let xLow,xHigh=x+size,yLow=y-size,yHigh=y+size;for(let i=x-size;i<=xHigh;i++)for(let j=yLow;j<=yHigh;j++)pixel=context.getImageData(i,j,1,1),pixel.data[0]=colorR,pixel.data[1]=colorG,pixel.data[2]=colorB,context.putImageData(pixel,i,j)}pathSizeElement.value=pathSize,badgePathSize.innerHTML=pathSize,pathSizeElement.addEventListener("input",e=>{pathSize=e.target.value,badgePathSize.innerHTML=pathSize,redrawPath()});const newColor=document.getElementById("custom-color");let red=hexToRgb(newColor.value).r,green=hexToRgb(newColor.value).g,blue=hexToRgb(newColor.value).b;const settingsIcon=document.getElementById("settings-icon");function saveSettings(){}function resetDefault(){confirm("Are you sure? All your changes will be lost.")?(newColor.value="#fafafa",red=hexToRgb(newColor.value).r,green=hexToRgb(newColor.value).g,blue=hexToRgb(newColor.value).b,settingsIcon.style.color=newColor.value,pathSize=1,pathSizeElement.value=pathSize,badgePathSize.innerText=pathSize,sensitivity=5,sensitivityRange.value=sensitivity,badgeSensitivity.innerText=sensitivity,M.toast({html:"Settings reset to default",classes:"green rounded",displayLength:1e3})):M.toast({html:"Your settings are safe.",classes:"blue rounded",displayLength:1e3})}function resetAll(){confirm("Are you sure? All your changes will be lost. This will reload app.")?(localStorage.clear(),location.reload()):M.toast({html:"Your settings are safe.",classes:"blue rounded",displayLength:1e3})}newColor.addEventListener("input",e=>{newColor.value=e.target.value,red=hexToRgb(e.target.value).r,green=hexToRgb(e.target.value).g,blue=hexToRgb(e.target.value).b,settingsIcon.style.color=e.target.value});let sensitivity=5;const sensitivityRange=document.getElementById("sensitivity"),badgeSensitivity=document.getElementById("badge-sensitivity");function compareColorValues(x,y,currentPathColor){return pixel=context.getImageData(x,y,1,1),pixel.data[0]>=red-sensitivity&&pixel.data[0]<=red+sensitivity&&pixel.data[1]>=green-sensitivity&&pixel.data[1]<=green+sensitivity&&pixel.data[2]>=blue-sensitivity&&pixel.data[2]<=blue+sensitivity||(pixel.data[0]===hexToRgb(currentPathColor).r&&pixel.data[1]===hexToRgb(currentPathColor).g&&pixel.data[2]===hexToRgb(currentPathColor).b||(0==pixel.data[0]&&pixel.data[1]>=250&&0==pixel.data[2]||(0==pixel.data[0]&&0==pixel.data[1]&&pixel.data[2]>=250||pixel.data[0]>=255&&0==pixel.data[1]&&0==pixel.data[2])))}function findVertexAtCoordinate(x,y){let boxJ=Math.trunc(x/box_dimensions),boxI=Math.trunc(y/box_dimensions),hotCell;return Math.trunc(boxI*maxX+boxJ)}function findCoordinateOfVertex(vertexNumber){let currCell=vertexNumber,i=Math.trunc(currCell/maxX),j,x,y;return[Math.trunc(currCell-i*maxX)*box_dimensions+box_dimensions/2,i*box_dimensions+box_dimensions/2]}function hexToRgb(hex){var result=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);return result?{r:parseInt(result[1],16),g:parseInt(result[2],16),b:parseInt(result[3],16)}:null}function resetBfsManagerStates(){predFromSource.clear(),predFromDest.clear(),sourceQueue=new Array,destQueue=new Array,sourceVisited=new Array(vertex).fill(!1),destVisited=new Array(vertex).fill(!1)}sensitivityRange.value=sensitivity,badgeSensitivity.innerText=sensitivity,sensitivityRange.addEventListener("input",e=>{sensitivity=e.target.value,badgeSensitivity.innerText=sensitivity});